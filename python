import pygame as pg
import copy
import time as t

wide = 512
high = 512
squares = 8
sq_size = wide / squares
fps = 10
pic = {}
valid_move = []
pmoves = []
w_king = [7, 4]
b_king = [0, 4]
passage = False


# 加載圖片
def load_image():
    pieces = ["bc", "bh", "bb", "bq", "bk", "bb", "bh", "bc", "bp", "wc", "wh", "wb", "wq", "wk", "wb", "wh", "wc",
              "wp"]
    for i in pieces:
        pic[i] = pg.transform.scale(pg.image.load("pic/" + i + ".png"), (sq_size, sq_size))


class game:
    def __init__(self):
        self.board = [
            ["bc", "bh", "bb", "bq", "bk", "bb", "bh", "bc"],
            ["bp", "bp", "bp", "bp", "bp", "bp", "bp", "bp"],
            ["..", "..", "..", "..", "..", "..", "..", ".."],
            ["..", "..", "..", "..", "..", "..", "..", ".."],
            ["..", "..", "..", "..", "..", "..", "..", ".."],
            ["..", "..", "..", "..", "..", "..", "..", ".."],
            ["wp", "wp", "wp", "wp", "wp", "wp", "wp", "wp"],
            ["wc", "wh", "wb", "wq", "wk", "wb", "wh", "wc"]
        ]
        self.white_move = True
        self.record = []


def valid_moves(mygame, moves, pmoves):
    moves.clear()
    pmoves.clear()
    for i in range(squares):
        for j in range(squares):
            check_color = mygame.board[i][j][0]
            if (check_color == 'w' and mygame.white_move) or (
                    check_color == 'b' and not mygame.white_move):
                check_piece = mygame.board[i][j][1]
                if check_piece == 'p':
                    pawn(mygame, i, j, mygame.white_move, moves)
                elif check_piece == 'c':
                    castle(mygame, i, j, mygame.white_move, moves)
                elif check_piece == 'b':
                    bishop(mygame, i, j, mygame.white_move, moves)
                elif check_piece == 'q':
                    queen(mygame, i, j, mygame.white_move, moves)
                elif check_piece == 'h':
                    horse(mygame, i, j, mygame.white_move, moves)
                elif check_piece == 'k':
                    king(mygame, i, j, mygame.white_move, moves)
    l = len(mygame.record) - 1
    if l > 0:
        if mygame.board[mygame.record[l][1][0]][mygame.record[l][1][1]][1] == 'p':
            if mygame.record[l][0][0] == 1 and mygame.record[l][0][1] == 3:
                print(2)
                if j != 0 and mygame.board[mygame.record[l][1][0]][mygame.record[l][1][1] - 1] == "wp":
                    pmoves.append([[4, mygame.record[l][1][1] - 1], [2, mygame.record[l][1][1]]])
                    print(1)
                if j != 7 and mygame.board[mygame.record[l][1][0]][mygame.record[l][1][1] + 1] == "wp":
                    pmoves.append([[4, mygame.record[l][1][1] + 1], [2, mygame.record[l][1][1]]])
                    print(1)


def get_valid(mygame, moves):
    valid_moves(mygame, moves, pmoves)
    opp_moves = []
    new_arr = []
    arr = copy.deepcopy(mygame.board)
    wk_pos = copy.deepcopy(w_king)
    bk_pos = copy.deepcopy(b_king)
    for i in range(len(moves) - 1, -1, -1):
        c = True
        piece_move(mygame, moves[i][0][0], moves[i][0][1], moves[i][1][0], moves[i][1][1])
        valid_moves(mygame, opp_moves, pmoves)
        mygame.white_move = not mygame.white_move
        for j in opp_moves:
            if not c:
                break
            if mygame.white_move:
                if w_king == j[1]:
                    c = False
            else:
                if b_king == j[1]:
                    c = False
        if c:
            new_arr.append(moves[i])

        if [moves[i][0][0], moves[i][0][1]] == wk_pos:
            w_king[0] = wk_pos[0]
            w_king[1] = wk_pos[1]
        elif [moves[i][0][0], moves[i][0][1]] == bk_pos:
            b_king[0] = bk_pos[0]
            b_king[1] = bk_pos[1]
        mygame.board = copy.deepcopy(arr)
    moves = copy.deepcopy(new_arr)
    return moves


def piece_move(mygame, x, y, new_x, new_y):
    mygame.board[new_x][new_y] = mygame.board[x][y]
    mygame.board[x][y] = ".."
    mygame.white_move = not mygame.white_move
    if [x, y] == w_king:
        w_king[0] = new_x
        w_king[1] = new_y
    elif [x, y] == b_king:
        b_king[0] = new_x
        b_king[1] = new_y


def pawn(mygame, x, y, turn, arr):
    if turn:
        if mygame.board[x - 1][y] == "..":
            arr.append([[x, y], [x - 1, y]])
        if x == 6 and mygame.board[4][y] == ".." and mygame.board[5][y] == "..":
            arr.append([[x, y], [4, y]])
        if y != 0 and mygame.board[x - 1][y - 1][0] == 'b':
            arr.append([[x, y], [x - 1, y - 1]])
        if y != 7 and mygame.board[x - 1][y + 1][0] == 'b':
            arr.append([[x, y], [x - 1, y + 1]])
    else:
        if mygame.board[x + 1][y] == "..":
            arr.append([[x, y], [x + 1, y]])
        if x == 1 and mygame.board[3][y] == ".." and mygame.board[2][y] == "..":
            arr.append([[x, y], [3, y]])
        if y != 0 and mygame.board[x + 1][y - 1][0] == 'w':
            arr.append([[x, y], [x + 1, y - 1]])
        if y != 7 and mygame.board[x + 1][y + 1][0] == 'w':
            arr.append([[x, y], [x + 1, y + 1]])


def castle(mygame, x, y, turn, arr):
    if turn:
        for i in range(x - 1, -1, -1):
            if mygame.board[i][y] == "..":
                arr.append([[x, y], [i, y]])
            elif mygame.board[i][y][0] == 'w':
                break
            elif mygame.board[i][y][0] == "b":
                arr.append([[x, y], [i, y]])
                break
        for i in range(x + 1, 8):
            if mygame.board[i][y] == "..":
                arr.append([[x, y], [i, y]])
            elif mygame.board[i][y][0] == 'w':
                break
            elif mygame.board[i][y][0] == "b":
                arr.append([[x, y], [i, y]])
                break

        for i in range(y - 1, -1, -1):
            if mygame.board[x][i] == "..":
                arr.append([[x, y], [x, i]])
            elif mygame.board[x][i][0] == 'w':
                break
            elif mygame.board[x][i][0] == "b":
                arr.append([[x, y], [x, i]])
                break
        for i in range(y + 1, 8):
            if mygame.board[x][i] == "..":
                arr.append([[x, y], [x, i]])
            elif mygame.board[x][i][0] == 'w':
                break
            elif mygame.board[x][i][0] == "b":
                arr.append([[x, y], [x, i]])
                break
    else:
        for i in range(x - 1, -1, -1):
            if mygame.board[i][y] == "..":
                arr.append([[x, y], [i, y]])
            elif mygame.board[i][y][0] == 'b':
                break
            elif mygame.board[i][y][0] == "w":
                arr.append([[x, y], [i, y]])
                break
        for i in range(x + 1, 8):
            if mygame.board[i][y] == "..":
                arr.append([[x, y], [i, y]])
            elif mygame.board[i][y][0] == 'b':
                break
            elif mygame.board[i][y][0] == "w":
                arr.append([[x, y], [i, y]])
                break

        for i in range(y - 1, -1, -1):
            if mygame.board[x][i] == "..":
                arr.append([[x, y], [x, i]])
            elif mygame.board[x][i][0] == 'b':
                break
            elif mygame.board[x][i][0] == "w":
                arr.append([[x, y], [x, i]])
                break
        for i in range(y + 1, 8):
            if mygame.board[x][i] == "..":
                arr.append([[x, y], [x, i]])
            elif mygame.board[x][i][0] == 'b':
                break
            elif mygame.board[x][i][0] == "w":
                arr.append([[x, y], [x, i]])
                break


def bishop(mygame, x, y, turn, arr):
    if turn:
        for i in range(1, 8):
            if x + i == 8:
                break
            if y + i == 8:
                break
            if mygame.board[x + i][y + i] == "..":
                arr.append([[x, y], [x + i, y + i]])
            elif mygame.board[x + i][y + i][0] == "w":
                break
            elif mygame.board[x + i][y + i][0] == "b":
                arr.append([[x, y], [x + i, y + i]])
                break
        for i in range(1, 8):
            if x - i == -1:
                break
            if y - i == -1:
                break
            if mygame.board[x - i][y - i] == "..":
                arr.append([[x, y], [x - i, y - i]])
            elif mygame.board[x - i][y - i][0] == "w":
                break
            elif mygame.board[x - i][y - i][0] == "b":
                arr.append([[x, y], [x - i, y - i]])
                break
        for i in range(1, 8):
            if x - i == -1:
                break
            if y + i == 8:
                break
            if mygame.board[x - i][y + i] == "..":
                arr.append([[x, y], [x - i, y + i]])
            elif mygame.board[x - i][y + i][0] == "w":
                break
            elif mygame.board[x - i][y + i][0] == "b":
                arr.append([[x, y], [x - i, y + i]])
                break
        for i in range(1, 8):
            if x + i == 8:
                break
            if y - i == -1:
                break
            if mygame.board[x + i][y - i] == "..":
                arr.append([[x, y], [x + i, y - i]])
            elif mygame.board[x + i][y - i][0] == "w":
                break
            elif mygame.board[x + i][y - i][0] == "b":
                arr.append([[x, y], [x + i, y - i]])
                break
    else:
        for i in range(1, 8):
            if x + i == 8:
                break
            if y + i == 8:
                break
            if mygame.board[x + i][y + i] == "..":
                arr.append([[x, y], [x + i, y + i]])
            elif mygame.board[x + i][y + i][0] == "b":
                break
            elif mygame.board[x + i][y + i][0] == "w":
                arr.append([[x, y], [x + i, y + i]])
                break
        for i in range(1, 8):
            if x - i == -1:
                break
            if y - i == -1:
                break
            if mygame.board[x - i][y - i] == "..":
                arr.append([[x, y], [x - i, y - i]])
            elif mygame.board[x - i][y - i][0] == "b":
                break
            elif mygame.board[x - i][y - i][0] == "w":
                arr.append([[x, y], [x - i, y - i]])
                break
        for i in range(1, 8):
            if x - i == -1:
                break
            if y + i == 8:
                break
            if mygame.board[x - i][y + i] == "..":
                arr.append([[x, y], [x - i, y + i]])
            elif mygame.board[x - i][y + i][0] == "b":
                break
            elif mygame.board[x - i][y + i][0] == "w":
                arr.append([[x, y], [x - i, y + i]])
                break
        for i in range(1, 8):
            if x + i == 8:
                break
            if y - i == -1:
                break
            if mygame.board[x + i][y - i] == "..":
                arr.append([[x, y], [x + i, y - i]])
            elif mygame.board[x + i][y - i][0] == "b":
                break
            elif mygame.board[x + i][y - i][0] == "w":
                arr.append([[x, y], [x + i, y - i]])
                break


def queen(mygame, x, y, turn, arr):
    castle(mygame, x, y, turn, arr)
    bishop(mygame, x, y, turn, arr)


def horse(mygame, x, y, turn, arr):
    if turn:
        if x - 2 >= 0 and y - 1 >= 0 and mygame.board[x - 2][y - 1][0] != 'w':
            arr.append([[x, y], [x - 2, y - 1]])
        if x - 2 >= 0 and y + 1 <= 7 and mygame.board[x - 2][y + 1][0] != 'w':
            arr.append([[x, y], [x - 2, y + 1]])
        if x + 2 <= 7 and y - 1 >= 0 and mygame.board[x + 2][y - 1][0] != 'w':
            arr.append([[x, y], [x + 2, y - 1]])
        if x + 2 <= 7 and y + 1 <= 7 and mygame.board[x + 2][y + 1][0] != 'w':
            arr.append([[x, y], [x + 2, y + 1]])
        if x - 1 >= 0 and y - 2 >= 0 and mygame.board[x - 1][y - 2][0] != 'w':
            arr.append([[x, y], [x - 1, y - 2]])
        if x - 1 >= 0 and y + 2 <= 7 and mygame.board[x - 1][y + 2][0] != 'w':
            arr.append([[x, y], [x - 1, y + 2]])
        if x + 1 <= 7 and y - 2 >= 0 and mygame.board[x + 1][y - 2][0] != 'w':
            arr.append([[x, y], [x + 1, y - 2]])
        if x + 1 <= 7 and y + 2 <= 7 and mygame.board[x + 1][y + 2][0] != 'w':
            arr.append([[x, y], [x + 1, y + 2]])
    else:
        if x - 2 >= 0 and y - 1 >= 0 and mygame.board[x - 2][y - 1][0] != 'b':
            arr.append([[x, y], [x - 2, y - 1]])
        if x - 2 >= 0 and y + 1 <= 7 and mygame.board[x - 2][y + 1][0] != 'b':
            arr.append([[x, y], [x - 2, y + 1]])
        if x + 2 <= 7 and y - 1 >= 0 and mygame.board[x + 2][y - 1][0] != 'b':
            arr.append([[x, y], [x + 2, y - 1]])
        if x + 2 <= 7 and y + 1 <= 7 and mygame.board[x + 2][y + 1][0] != 'b':
            arr.append([[x, y], [x + 2, y + 1]])
        if x - 1 >= 0 and y - 2 >= 0 and mygame.board[x - 1][y - 2][0] != 'b':
            arr.append([[x, y], [x - 1, y - 2]])
        if x - 1 >= 0 and y + 2 <= 7 and mygame.board[x - 1][y + 2][0] != 'b':
            arr.append([[x, y], [x - 1, y + 2]])
        if x + 1 <= 7 and y - 2 >= 0 and mygame.board[x + 1][y - 2][0] != 'b':
            arr.append([[x, y], [x + 1, y - 2]])
        if x + 1 <= 7 and y + 2 <= 7 and mygame.board[x + 1][y + 2][0] != 'b':
            arr.append([[x, y], [x + 1, y + 2]])


def king(mygame, x, y, turn, arr):
    if turn:
        if x + 1 <= 7 and mygame.board[x + 1][y][0] != 'w':
            arr.append([[x, y], [x + 1, y]])
        if x - 1 >= 0 and mygame.board[x - 1][y][0] != 'w':
            arr.append([[x, y], [x - 1, y]])
        if x + 1 <= 7 and mygame.board[x + 1][y + 1][0] != 'w' and y + 1 <= 7:
            arr.append([[x, y], [x + 1, y + 1]])
        if x - 1 >= 0 and mygame.board[x - 1][y - 1][0] != 'w' and y - 1 >= 0:
            arr.append([[x, y], [x - 1, y - 1]])
        if x + 1 <= 7 and mygame.board[x + 1][y - 1][0] != 'w' and y - 1 <= 7:
            arr.append([[x, y], [x + 1, y - 1]])
        if x - 1 >= 0 and mygame.board[x - 1][y + 1][0] != 'w' and y + 1 >= 0:
            arr.append([[x, y], [x - 1, y + 1]])
        if y + 1 <= 7 and mygame.board[x][y + 1][0] != 'w':
            arr.append([[x, y], [x, y + 1]])
        if y - 1 >= 0 and mygame.board[x][y - 1][0] != 'w':
            arr.append([[x, y], [x, y - 1]])
    else:
        if x + 1 <= 7 and mygame.board[x + 1][y][0] != 'b':
            arr.append([[x, y], [x + 1, y]])
        if x - 1 >= 0 and mygame.board[x - 1][y][0] != 'b':
            arr.append([[x, y], [x - 1, y]])
        if x + 1 <= 7 and mygame.board[x + 1][y + 1][0] != 'b' and y + 1 <= 7:
            arr.append([[x, y], [x + 1, y + 1]])
        if x - 1 >= 0 and mygame.board[x - 1][y - 1][0] != 'b' and y - 1 >= 0:
            arr.append([[x, y], [x - 1, y - 1]])
        if x + 1 <= 7 and mygame.board[x + 1][y - 1][0] != 'b' and y - 1 <= 7:
            arr.append([[x, y], [x + 1, y - 1]])
        if x - 1 >= 0 and mygame.board[x - 1][y + 1][0] != 'b' and y + 1 >= 0:
            arr.append([[x, y], [x - 1, y + 1]])
        if y + 1 <= 7 and mygame.board[x][y + 1][0] != 'b':
            arr.append([[x, y], [x, y + 1]])
        if y - 1 >= 0 and mygame.board[x][y - 1][0] != 'b':
            arr.append([[x, y], [x, y - 1]])


def pawn_promote(turn):
    promote = input("pawn promote")
    if turn:
        w = ["wc", "wh", "wb", "wq"]
        while promote not in w:
            promote = input("pawn promote")
        return promote
    else:
        b = ["bc", "bh", "bb", "bq"]
        while promote not in b:
            promote = input("pawn promote")
        return promote


def castled(mygame, x, y, new_x, new_y):
    a = ".."
    if not mygame.white_move:
        if x == 0 and y == 4:
            if new_x == 0 and new_y == 1:
                if mygame.board[0][1] == a and mygame.board[0][2] == a and mygame.board[0][3] == a:
                    for i in mygame.record:
                        if i[0] == [x, y] or i[1] == [x, y] or i[0] == [new_x, 7] or i[1] == [new_x, 7]:
                            return
                    mygame.board[0][0] = ".."
                    mygame.board[0][1] = "bk"
                    b_king[1] = 1
                    mygame.board[0][3] = "bc"
                    mygame.white_move = not mygame.white_move
                    return
                else:
                    return
            elif new_x == 0 and new_y == 6:
                if mygame.board[0][5] == a and mygame.board[0][6] == a:
                    for i in mygame.record:
                        if i[0] == [x, y] or i[1] == [x, y] or i[0] == [new_x, 7] or i[1] == [new_x, 7]:
                            return
                    mygame.board[0][7] = ".."
                    mygame.board[0][6] = "bk"
                    b_king[1] = 6
                    mygame.board[0][5] = "bc"
                    mygame.board[0][4] = ".."
                    mygame.white_move = not mygame.white_move
                    return
            else:
                return
    else:
        if x == 7 and y == 4:
            if new_x == 7 and new_y == 1:
                if mygame.board[7][1] == a and mygame.board[7][2] == a and mygame.board[7][3] == a:
                    for i in mygame.record:
                        if i[0] == [x, y] or i[1] == [x, y] or i[0] == [new_x, 0] or i[1] == [new_x, 0]:
                            return
                    mygame.board[7][0] = ".."
                    mygame.board[7][1] = "wk"
                    w_king[1] = 1
                    mygame.board[7][3] = "wc"
                    mygame.board[7][4] = ".."
                    mygame.white_move = not mygame.white_move
                    return
                else:
                    return
            elif new_x == 7 and new_y == 6:
                if mygame.board[7][5] == a and mygame.board[7][6] == a:
                    for i in mygame.record:
                        if i[0] == [x, y] or i[1] == [x, y] or i[0] == [new_x, 7] or i[1] == [new_x, 7]:
                            return
                    mygame.board[7][7] = ".."
                    mygame.board[7][6] = "wk"
                    w_king[1] = 6
                    mygame.board[7][5] = "wc"
                    mygame.board[7][4] = ".."
                    mygame.white_move = not mygame.white_move
                    return
                else:
                    return
            else:
                return


# def enpassent(mygame, x, y, new_x, new_y):


def draw_board(screen):
    colors = [pg.Color("white"), pg.Color("red")]
    for i in range(squares):
        for j in range(squares):
            pg.draw.rect(screen, colors[(i + j) % 2], pg.Rect(j * sq_size, i * sq_size, sq_size, sq_size))


def draw_piece(screen, board):
    for i in range(squares):
        for j in range(squares):
            p = board[i][j]
            if p != "..":
                screen.blit(pic[p], pg.Rect(j * sq_size, i * sq_size, sq_size, sq_size))


def draw_game(screen, mg):
    draw_board(screen)
    draw_piece(screen, mg.board)


def main():
    pg.init()
    screen = pg.display.set_mode((high, wide))
    time = pg.time.Clock()
    screen.fill(pg.Color("white"))
    mygame = game()
    load_image()
    select = [-1, -1]
    while 1:
        for e in pg.event.get():
            if e.type == pg.QUIT:
                break
            elif e.type == pg.MOUSEBUTTONDOWN:
                pos = pg.mouse.get_pos()
                sq_x = int(pos[1] // sq_size)
                sq_y = int(pos[0] // sq_size)
                if select == [sq_x, sq_y]:
                    select = [-1, -1]
                elif select == [-1, -1]:
                    select = [sq_x, sq_y]
                else:
                    if [select, [sq_x, sq_y]] in get_valid(mygame, valid_move):
                        piece_move(mygame, select[0], select[1], sq_x, sq_y)
                        mygame.record.append([select, [sq_x, sq_y]])
                    castled(mygame, select[0], select[1], sq_x, sq_y)
                    print(mygame.record)
                    print(pmoves)
                    select = [-1, -1]
                    for i in range(8):
                        if mygame.board[0][i] == "wp":
                            mygame.board[0][i] = copy.deepcopy(pawn_promote(True))
                        elif mygame.board[7][i] == "bp":
                            mygame.board[7][i] = copy.deepcopy(pawn_promote(False))
                    if not get_valid(mygame, valid_move):
                        draw_game(screen, mygame)
                        time.tick(fps)
                        pg.display.flip()
                        mygame.white_move = not mygame.white_move
                        valid_moves(mygame, valid_move, pmoves)
                        is_check = False
                        if mygame.white_move:
                            for i in valid_move:
                                if is_check:
                                    break
                                if i[1] == b_king:
                                    is_check = True
                        else:
                            for i in valid_move:
                                if is_check:
                                    break
                                if i[1] == w_king:
                                    is_check = True
                        if is_check:
                            print("checkmate!!!", end=" ")
                            if mygame.white_move:
                                print("white win")
                            else:
                                print("black win")
                        else:
                            print("stalemate, draw")
                        t.sleep(3)
                        exit(1)

        draw_game(screen, mygame)
        time.tick(fps)
        pg.display.flip()


main()
exit(1)

