#include <bits/stdc++.h>
#include <windows.h>
#include <conio.h>
using namespace std;
void SetColor(int color = 7)
{
  HANDLE hConsole;
  hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
  SetConsoleTextAttribute(hConsole, color);
}
void SetPos(int y,int x)
{
      HANDLE screen=GetStdHandle(STD_OUTPUT_HANDLE);
      COORD pos;
      pos.Y=y;
      pos.X=x;
      SetConsoleCursorPosition(screen, pos);
}
class game
{
public:
int TopScore;
int score;
int speed;
int NowGraphic;
int NextGraphic;
bool check;
int FallTime;
int NowPos[2];
int spins;
int s;
int hold;
bool HoldCheck;
int stage;
int lines;
int combos;
vector<vector<bool>> blocks;
vector<vector<vector<vector<int> > > > graphic;//graphic->model->coordinate
game(int i,int bs)
{
    lines=i*10-10;
    TopScore=bs;
    score=0;
    speed=max(55-i*5,5);
    spins=0;
    s=1000;
    hold=-1;
    stage=i;
    combos=1;
    HoldCheck=false;
    graphic.push_back({{{0,2},{1,0},{1,1},{1,2}},{{0,1},{1,1},{2,1},{2,2}},{{1,0},{1,1},{1,2},{2,0}},{{0,0},{0,1},{1,1},{2,1}}});//L
    graphic.push_back({{{0,0},{1,0},{1,1},{1,2}},{{0,1},{0,2},{1,1},{2,1}},{{1,0},{1,1},{1,2},{2,2}},{{0,1},{1,1},{2,0},{2,1}}});//J
    graphic.push_back({{{0,1},{0,2},{1,0},{1,1}},{{0,1},{1,1},{1,2},{2,2}},{{1,1},{1,2},{2,0},{2,1}},{{0,0},{1,0},{1,1},{2,1}}});//S
    graphic.push_back({{{1,0},{1,1},{1,2},{1,3}},{{0,2},{1,2},{2,2},{3,2}},{{2,0},{2,1},{2,2},{2,3}},{{0,1},{1,1},{2,1},{3,1}}});//I
    graphic.push_back({{{0,0},{0,1},{1,1},{1,2}},{{0,2},{1,1},{1,2},{2,1}},{{1,0},{1,1},{2,1},{2,2}},{{0,1},{1,0},{1,1},{2,0}}});//Z
    graphic.push_back({{{0,1},{1,0},{1,1},{1,2}},{{0,1},{1,1},{1,2},{2,1}},{{1,0},{1,1},{1,2},{2,1}},{{0,1},{1,0},{1,1},{2,1}}});//T
    graphic.push_back({{{1,1},{1,2},{2,1},{2,2}}});//O
    NowGraphic=rand()%7;
    NextGraphic=rand()%7;
    check=false;
    NowPos[0]=0;
    NowPos[1]=8;
    FallTime=0;
    vector<bool> v;
    v.push_back(true);v.push_back(true);
    for(int i=2;i<12;i++) v.push_back(false);
    v.push_back(true);v.push_back(true);
    for(int i=0;i<20;i++) blocks.push_back(v);
    vector<bool> v1(14,true);
    for(int i=20;i<24;i++) blocks.push_back(v1);
}



void drawmap()
{
    SetColor();
    for(int i=0;i<20;i++)
    {
      SetPos(i,0);
      cout<<0;
      SetPos(i,22);
      cout<<0;
    }
    SetPos(20,0);
    for(int i=0;i<12;i++) cout<<"0 ";
    SetPos(0,24);
    cout<<"next:";
    SetPos(5,24);
    cout<<"hold:";
    SetPos(11,24);
    cout<<"best score:"<<TopScore;
    SetPos(13,24);
    cout<<"your score:"<<score;
    SetPos(15,24);
    cout<<"stage:"<<stage;
}
int Next(int n)
{
    for(int i=24;i<32;i+=2)
    {
        for(int j=1;j<5;j++)
        {
            SetPos(j,i);
            cout<<" ";
        }
    }
    PrintGraphic(24,1,n);
}
int NowDrop(int n)
{
    PrintGraphic(NowPos[1],NowPos[0],n);

}
void PrintGraphic(int x,int y,int modelnum)
{
    int counter=0;
    SetColor(modelnum+8);
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<4;j++)
        {
         if(graphic[modelnum][spins][counter][0]==i&&graphic[modelnum][spins][counter][1]==j)
         {
             counter++;
             SetPos(y+i,x+j*2);
             cout<<0;
         }
         if(counter==4) return;
        }
    }
}
bool FallJudge()
{
    for(int i=0;i<4;i++)
    {
        if(blocks[graphic[NowGraphic][spins][i][0]+1+NowPos[0]][NowPos[1]/2+graphic[NowGraphic][spins][i][1]+1]) return true;
    }
    return false;
}
void ClearGraphic()
{
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<8;j+=2)
        {
            if(this->blocks[NowPos[0]+i][(NowPos[1]+j)/2+1]) continue;
             SetPos(this->NowPos[0]+i,this->NowPos[1]+j);
             cout<<" ";
        }
    }
}
void RegressPos()
{
    NowPos[0]=0;
    NowPos[1]=8;
}
void prepare()
{
    s=1000;
    spins=0;
    RegressPos();
    NowGraphic=NextGraphic;
    NextGraphic=rand()%7;
    Next(NextGraphic);


}
void inputblocks()
{
        for(int i=0;i<4;i++)
               {
                 blocks[graphic[NowGraphic][spins][i][0]+NowPos[0]][NowPos[1]/2+graphic[NowGraphic][spins][i][1]+1]=true;
               }
}
void manipulate()
{
    bool ValidMove=false;
    int f=getch();
    if(f=='a'&&NowPos[1]>=0)
    {
        if(MoveJudge(NowPos[0],NowPos[1]-2,spins))
        {
            ClearGraphic();
            FallTime-=speed/4;
            NowPos[1]-=2;
            NowDrop(NowGraphic);
            ValidMove=true;
        }

    }
    else if(f=='d'&&NowPos[1]!=20)
    {

       if(MoveJudge(NowPos[0],NowPos[1]+2,spins))
        {
            ClearGraphic();
            FallTime-=speed/4;
            NowPos[1]+=2;
            NowDrop(NowGraphic);
        }

    }
    else if(f=='w')
    {
        int temp=s+1;
        int temps=temp%graphic[NowGraphic].size();
        if(MoveJudge(NowPos[0],NowPos[1],temps))
        {
            ClearGraphic();
            s++;
            FallTime-=speed/10;
            spins=s%graphic[NowGraphic].size();
            NowDrop(NowGraphic);
        }

    }
    else if(f=='s')
    {
        if(NowPos[0]!=0)
        {
            FallTime=speed;
            score++;
            printscore();
        }
    }
    else if(f==' ')
    {
        while(!FallJudge())
        {
            ClearGraphic();
            NowPos[0]++;
            score+=2;
        }
        printscore();
        FallTime=speed;
        NowDrop(NowGraphic);
    }
    else if(f=='c')
    {
        if(hold==-1)
        {
            ClearGraphic();
            hold=NowGraphic;
            RegressPos();
            spins=0;
            PrintGraphic(23,6,NowGraphic);
            HoldCheck=true;
            NowGraphic=NextGraphic;
            NextGraphic=rand()%7;
            FallTime=0;
            NowDrop(NowGraphic);

        }
        if(!HoldCheck)
        {
            int temp;
            for(int i=23;i<31;i+=2)
            {
                for(int j=6;j<10;j++)
                {
                    SetPos(j,i);
                    cout<<" ";
                }
            }
            ClearGraphic();
            temp=NowGraphic;
            NowGraphic=hold;
            hold=temp;
            spins=0;
            PrintGraphic(23,6,hold);
            HoldCheck=true;
            RegressPos();
            FallTime=0;
            NowDrop(NowGraphic);

        }
    }
    else if(f=='p')
    {
        SetPos(22,0);
        system("pause");
        SetPos(22,0);
        cout<<"                         ";
    }


}
bool MoveJudge(int v1,int v2,int myspins)
{


   for(int i=0;i<4;i++)
    {


        if(blocks[graphic[NowGraphic][myspins][i][0]+v1][v2/2+graphic[NowGraphic][myspins][i][1]+1])
        {
            return false;
        }
    }
    return true;
}
void LineJudge()
{
    vector<int> clearrows;
    for(int i=NowPos[0];i<NowPos[0]+4&&i<20;i++)
    {
        bool check=true;
        for(int j=2;j<12;j++)
        {
            if(!blocks[i][j])
            {
                check=false;
                break;
            }
        }
        if(check) clearrows.push_back(i);
    }
    if(clearrows.empty())
    {
        combos=1;
        return;
    }
    ClearLines(clearrows);

}
void ClearLines(vector<int> nums)
{
    switch(nums.size())
    {
    case 1:
        score+=(40+combos*50)*stage;
        break;
    case 2:
        score+=(100+combos*50)*stage;
        break;
     case 3:
        score+=(300*+combos*50)*stage;
        break;
    case 4:
        score+=(1200*+combos*50)*stage;
        break;
    }
     printscore();
    for(int i=0;i<nums.size();i++)
    {
        for(int j=nums[i];j>=1;j--)
        {
            for(int k=2;k<12;k++)
            {
                blocks[j][k]=blocks[j-1][k];
            }
        }
    }
    for(int i=0;i<20;i++)
    {
        for(int j=2;j<12;j++)
        {
            SetPos(i,j*2-2);
            if(blocks[i][j]) cout<<"0";
            else cout<<" ";
        }
    }
    lines+=nums.size();
    combos++;
}
void printscore()
{
    SetColor(7);
    SetPos(13,35);
    cout<<score;
    TopScore=max(TopScore,score);
    SetPos(11,35);
    cout<<TopScore;
    SetPos(15,30);
    cout<<stage;
}
};
void menu()
{
    cout<<"1.game start\n2.set stage\n3.Operation\n4.exit\n";
}
void option()
{
    cout<<"move left:A\n";
    cout<<"move right:D\n";
    cout<<"spin:W\n";
    cout<<"soft drop:S\n";
    cout<<"hard drop:space\n";
    cout<<"hold:C\n";
    cout<<"pause:P\n";
    cout<<"press any button to leave this page\n";
}
int main()
{
    string input;
    int setstage=1;
    int bs=0;
    srand(time(0));
    while(1)
    {
    menuflag:
    menu();
    cin>>input;
    if(input=="1")
    {
    gameflag:
    game g(setstage,bs);
    system("cls");
    g.drawmap();
    g.Next(g.NextGraphic);
    for(int i=3;i>=1;i--)
    {
        SetColor(15);
        SetPos(21,0);
        cout<<i;
        Sleep(1000);
    }
    SetPos(21,0);
    cout<<"go!";
    Sleep(300);
    SetPos(21,0);
    cout<<"        ";
    while(1)
    {
        g.stage=g.lines/10+1;
        g.speed=max(5,50-g.stage*5);
        if(g.FallTime>=g.speed)
        {
            g.FallTime=0;
            if(g.FallJudge())
            {
                g.inputblocks();
                g.LineJudge();
                g.prepare();
                g.NowDrop(g.NowGraphic);
                g.HoldCheck=false;
                if(!g.MoveJudge(g.NowPos[0],g.NowPos[1],g.spins))
                {
                    bs=g.TopScore;
                    SetColor(15);
                    SetPos(21,0);
                    cout<<"game over!/ndo you want to play again?(y/n)";
                    while(1)
                    {
                        cin>>input;
                        if(input=="y")
                        {
                            system("cls");
                            goto gameflag;
                        }
                        else if(input=="n")
                        {
                            cout<<"thanks for playing\n";
                            system("pause");
                            system("cls");
                            goto menuflag;
                        }

                    }

                }
                ;
            }
            else
            {
            g.ClearGraphic();
            g.NowPos[0]++;
            g.NowDrop(g.NowGraphic);
            }
        }

        if(kbhit())
        {
           g.manipulate();
        }
        SetPos(20,30);
        Sleep(1);
        g.FallTime++;

    }
    }
    else if(input=="2")
    {
        int ss;
        cout<<"choose difficulty (from 1 to 10)";
        while(1)
        {
        cin>>ss;
        if(ss>=1&&ss<=10)
        {
            setstage=ss;
            cout<<"Successfully modified\n";
            system("pause");
            system("cls");
            break;
        }
        else
        {
         cout<<"invalid input,please input again\n";
        }
        }

    }
    else if(input=="3")
    {
        system("cls");
        option();
         while(1)
    {
        if(kbhit())
        {
            getch();
            system("cls");
            goto menuflag;
        }

    }
    }
    else if(input=="4")
    {
        cout<<"byebye\n";
        system("pause");
        break;
    }
    }
    return 0;
}
